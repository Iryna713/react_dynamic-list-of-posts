{"version":3,"sources":["api/api.js","api/posts.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getPostComments","postId","deleteComment","id","method","addComment","headers","body","JSON","stringify","post","PostsList","onOpen","user","isPostChosen","selectedPost","useState","posts","setPosts","useEffect","userId","postsFromServer","className","map","key","title","type","onClick","NewCommentForm","name","setName","email","setEmail","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","PostDetails","setPost","comments","setComments","showComments","setShowComments","getPostDetails","newPost","comm","length","comment","obj","App","state","handleChoseUser","setState","handleOpenPost","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e9534176.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const remove = url => request(url, { method: 'DELETE' });\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json;charser=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n","import { remove, request, post } from './api';\n\nexport const getAllPosts = () => request(`/posts`);\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n\nexport const deleteComment = id => remove(`/comments/${id}`);\n\nexport const addComment = data => post(`/comments`, data);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport { getAllPosts, getUserPosts } from '../../api/posts';\n\nexport const PostsList = ({ onOpen, user, isPostChosen, selectedPost }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    if (user !== 0) {\n      getUserPosts(user)\n        .then((postsFromServer) => {\n          setPosts(postsFromServer);\n        });\n    } else {\n      getAllPosts()\n        .then((postsFromServer) => {\n          setPosts(postsFromServer);\n        });\n    }\n  }, [user, selectedPost, isPostChosen]);\n\n  const handleOpenPost = (id) => {\n    onOpen(id);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                [User#\n                {post.userId}\n                ]:\n              </b>\n            </div>\n            {post.title}\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => handleOpenPost(post.id)}\n            >\n              {(isPostChosen && selectedPost === post.id)\n                ? 'Close'\n                : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  onOpen: PropTypes.func.isRequired,\n  user: PropTypes.number.isRequired,\n  isPostChosen: PropTypes.bool.isRequired,\n  selectedPost: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleName = (event) => {\n    setName(event.target.value);\n  };\n\n  const handleEmail = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const handleBody = (event) => {\n    setBody(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    addComment({\n      name, email, body,\n    });\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  getPostDetails,\n  getPostComments,\n  deleteComment,\n  addComment,\n} from '../../api/posts';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [showComments, setShowComments] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(postId)\n      .then(newPost => setPost(newPost));\n\n    getPostComments(postId)\n      .then((comm) => {\n        setComments(comm);\n      });\n  }, [postId]);\n\n  const handleHiding = () => {\n    setShowComments(!showComments);\n  };\n\n  const handleDelete = (id) => {\n    deleteComment(id)\n      .then(() => {\n        getPostComments(postId)\n          .then((comm) => {\n            setComments(comm);\n          });\n      });\n  };\n\n  const handleAdd = (obj) => {\n    addComment({\n      ...obj, postId,\n    })\n      .then(() => {\n        getPostComments(postId)\n          .then((comm) => {\n            setComments(comm);\n          });\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleHiding}\n        >\n          {showComments === true\n            ? 'Hide '\n            : 'Show '}\n          {comments.length}\n          {' '}\n          comments\n        </button>\n\n        {showComments\n          && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li className=\"PostDetails__list-item\" key={comment.id}>\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => handleDelete(comment.id)}\n                  >\n                    X\n                  </button>\n\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm addComment={handleAdd} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nclass App extends Component {\n  state ={\n    userId: 0,\n    postId: 0,\n    isPostChosen: false,\n  };\n\n  handleChoseUser = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: +value,\n    });\n  };\n\n  handleOpenPost = (id) => {\n    if (this.state.postId === id && this.state.isPostChosen) {\n      this.setState({ isPostChosen: false });\n    } else {\n      this.setState({\n        postId: id,\n        isPostChosen: true,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App__header\">\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              className=\"App__user-selector\"\n              value={this.state.userId}\n              name=\"userId\"\n              onChange={this.handleChoseUser}\n            >\n              <option value=\"0\">All users</option>\n              <option value=\"1\">Leanne Graham</option>\n              <option value=\"2\">Ervin Howell</option>\n              <option value=\"3\">Clementine Bauch</option>\n              <option value=\"4\">Patricia Lebsack</option>\n              <option value=\"5\">Chelsey Dietrich</option>\n              <option value=\"6\">Mrs. Dennis Schulist</option>\n              <option value=\"7\">Kurtis Weissnat</option>\n              <option value=\"8\">Nicholas Runolfsdottir V</option>\n              <option value=\"9\">Glenna Reichert</option>\n              <option value=\"10\">Leanne Graham</option>\n            </select>\n          </label>\n        </header>\n\n        <main className=\"App__main\">\n          <div className=\"App__sidebar\">\n            <PostsList\n              onOpen={this.handleOpenPost}\n              user={this.state.userId}\n              isPostChosen={this.state.isPostChosen}\n              selectedPost={this.state.postId}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            {this.state.isPostChosen\n            && <PostDetails postId={this.state.postId} />}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}